//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SynchronicWoldConsole.SynchronicWorldServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class PersonDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class EventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO StatusEventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusEventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO TypeEventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeEventIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO StatusEvent {
            get {
                return this.StatusEventField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusEventField, value) != true)) {
                    this.StatusEventField = value;
                    this.RaisePropertyChanged("StatusEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusEventId {
            get {
                return this.StatusEventIdField;
            }
            set {
                if ((this.StatusEventIdField.Equals(value) != true)) {
                    this.StatusEventIdField = value;
                    this.RaisePropertyChanged("StatusEventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO TypeEvent {
            get {
                return this.TypeEventField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeEventField, value) != true)) {
                    this.TypeEventField = value;
                    this.RaisePropertyChanged("TypeEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeEventId {
            get {
                return this.TypeEventIdField;
            }
            set {
                if ((this.TypeEventIdField.Equals(value) != true)) {
                    this.TypeEventIdField = value;
                    this.RaisePropertyChanged("TypeEventId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusEventDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class StatusEventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusEventIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusEventId {
            get {
                return this.StatusEventIdField;
            }
            set {
                if ((this.StatusEventIdField.Equals(value) != true)) {
                    this.StatusEventIdField = value;
                    this.RaisePropertyChanged("StatusEventId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeEventDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class TypeEventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeEventIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeEventId {
            get {
                return this.TypeEventIdField;
            }
            set {
                if ((this.TypeEventIdField.Equals(value) != true)) {
                    this.TypeEventIdField = value;
                    this.RaisePropertyChanged("TypeEventId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonEventDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class PersonEventDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO EventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonEventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO Event {
            get {
                return this.EventField;
            }
            set {
                if ((object.ReferenceEquals(this.EventField, value) != true)) {
                    this.EventField = value;
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonEventId {
            get {
                return this.PersonEventIdField;
            }
            set {
                if ((this.PersonEventIdField.Equals(value) != true)) {
                    this.PersonEventIdField = value;
                    this.RaisePropertyChanged("PersonEventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContributionDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class ContributionDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContributionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO EventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO PersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO TypeContributionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeContributionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContributionId {
            get {
                return this.ContributionIdField;
            }
            set {
                if ((this.ContributionIdField.Equals(value) != true)) {
                    this.ContributionIdField = value;
                    this.RaisePropertyChanged("ContributionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO Event {
            get {
                return this.EventField;
            }
            set {
                if ((object.ReferenceEquals(this.EventField, value) != true)) {
                    this.EventField = value;
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO Person {
            get {
                return this.PersonField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonField, value) != true)) {
                    this.PersonField = value;
                    this.RaisePropertyChanged("Person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityField, value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO TypeContribution {
            get {
                return this.TypeContributionField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeContributionField, value) != true)) {
                    this.TypeContributionField = value;
                    this.RaisePropertyChanged("TypeContribution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeContributionId {
            get {
                return this.TypeContributionIdField;
            }
            set {
                if ((this.TypeContributionIdField.Equals(value) != true)) {
                    this.TypeContributionIdField = value;
                    this.RaisePropertyChanged("TypeContributionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeContributionDTO", Namespace="http://schemas.datacontract.org/2004/07/SynchronicWorldClass.DTO")]
    [System.SerializableAttribute()]
    public partial class TypeContributionDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeContributionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeContributionId {
            get {
                return this.TypeContributionIdField;
            }
            set {
                if ((this.TypeContributionIdField.Equals(value) != true)) {
                    this.TypeContributionIdField = value;
                    this.RaisePropertyChanged("TypeContributionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SynchronicWorldServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPerson", ReplyAction="http://tempuri.org/IService1/GetAllPersonResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO[] GetAllPerson();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPerson", ReplyAction="http://tempuri.org/IService1/GetAllPersonResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO[]> GetAllPersonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPerson", ReplyAction="http://tempuri.org/IService1/GetPersonResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO GetPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPerson", ReplyAction="http://tempuri.org/IService1/GetPersonResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO> GetPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPerson", ReplyAction="http://tempuri.org/IService1/InsertPersonResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO InsertPerson(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPerson", ReplyAction="http://tempuri.org/IService1/InsertPersonResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO> InsertPersonAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditPerson", ReplyAction="http://tempuri.org/IService1/EditPersonResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO EditPerson(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditPerson", ReplyAction="http://tempuri.org/IService1/EditPersonResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO> EditPersonAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePerson", ReplyAction="http://tempuri.org/IService1/RemovePersonResponse")]
        void RemovePerson(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePerson", ReplyAction="http://tempuri.org/IService1/RemovePersonResponse")]
        System.Threading.Tasks.Task RemovePersonAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvent", ReplyAction="http://tempuri.org/IService1/GetAllEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetAllEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEvent", ReplyAction="http://tempuri.org/IService1/GetAllEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetAllEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEvent", ReplyAction="http://tempuri.org/IService1/GetEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO GetEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEvent", ReplyAction="http://tempuri.org/IService1/GetEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO> GetEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertEvent", ReplyAction="http://tempuri.org/IService1/InsertEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO InsertEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertEvent", ReplyAction="http://tempuri.org/IService1/InsertEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO> InsertEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditEvent", ReplyAction="http://tempuri.org/IService1/EditEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO EditEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditEvent", ReplyAction="http://tempuri.org/IService1/EditEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO> EditEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEventPending", ReplyAction="http://tempuri.org/IService1/UpdateEventPendingResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] UpdateEventPending();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEventPending", ReplyAction="http://tempuri.org/IService1/UpdateEventPendingResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> UpdateEventPendingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveEvent", ReplyAction="http://tempuri.org/IService1/RemoveEventResponse")]
        void RemoveEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveEvent", ReplyAction="http://tempuri.org/IService1/RemoveEventResponse")]
        System.Threading.Tasks.Task RemoveEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveEventClosed", ReplyAction="http://tempuri.org/IService1/RemoveEventClosedResponse")]
        void RemoveEventClosed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveEventClosed", ReplyAction="http://tempuri.org/IService1/RemoveEventClosedResponse")]
        System.Threading.Tasks.Task RemoveEventClosedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByName", ReplyAction="http://tempuri.org/IService1/GetEventByNameResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByName", ReplyAction="http://tempuri.org/IService1/GetEventByNameResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByType", ReplyAction="http://tempuri.org/IService1/GetEventByTypeResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByType(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByType", ReplyAction="http://tempuri.org/IService1/GetEventByTypeResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByTypeAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByStatus", ReplyAction="http://tempuri.org/IService1/GetEventByStatusResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByStatus(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByStatus", ReplyAction="http://tempuri.org/IService1/GetEventByStatusResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByStatusAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByDate", ReplyAction="http://tempuri.org/IService1/GetEventByDateResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByDate(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventByDate", ReplyAction="http://tempuri.org/IService1/GetEventByDateResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByDateAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventBetweenDate", ReplyAction="http://tempuri.org/IService1/GetEventBetweenDateResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventBetweenDate(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEventBetweenDate", ReplyAction="http://tempuri.org/IService1/GetEventBetweenDateResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventBetweenDateAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTypeEvent", ReplyAction="http://tempuri.org/IService1/GetAllTypeEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO[] GetAllTypeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTypeEvent", ReplyAction="http://tempuri.org/IService1/GetAllTypeEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO[]> GetAllTypeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeEventByName", ReplyAction="http://tempuri.org/IService1/GetTypeEventByNameResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO GetTypeEventByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeEventByName", ReplyAction="http://tempuri.org/IService1/GetTypeEventByNameResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO> GetTypeEventByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeEvent", ReplyAction="http://tempuri.org/IService1/GetTypeEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO GetTypeEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeEvent", ReplyAction="http://tempuri.org/IService1/GetTypeEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO> GetTypeEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertTypeEvent", ReplyAction="http://tempuri.org/IService1/InsertTypeEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO InsertTypeEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO typeEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertTypeEvent", ReplyAction="http://tempuri.org/IService1/InsertTypeEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO> InsertTypeEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO typeEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStatusEvent", ReplyAction="http://tempuri.org/IService1/GetAllStatusEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO[] GetAllStatusEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStatusEvent", ReplyAction="http://tempuri.org/IService1/GetAllStatusEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO[]> GetAllStatusEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStatusEventByName", ReplyAction="http://tempuri.org/IService1/GetStatusEventByNameResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO GetStatusEventByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStatusEventByName", ReplyAction="http://tempuri.org/IService1/GetStatusEventByNameResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO> GetStatusEventByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStatusEvent", ReplyAction="http://tempuri.org/IService1/GetStatusEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO GetStatusEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStatusEvent", ReplyAction="http://tempuri.org/IService1/GetStatusEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO> GetStatusEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertStatusEvent", ReplyAction="http://tempuri.org/IService1/InsertStatusEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO InsertStatusEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO statusEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertStatusEvent", ReplyAction="http://tempuri.org/IService1/InsertStatusEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO> InsertStatusEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO statusEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPersonEvent", ReplyAction="http://tempuri.org/IService1/InsertPersonEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO InsertPersonEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO personEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertPersonEvent", ReplyAction="http://tempuri.org/IService1/InsertPersonEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO> InsertPersonEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO personEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonEventByEvent", ReplyAction="http://tempuri.org/IService1/GetPersonEventByEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO[] GetPersonEventByEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonEventByEvent", ReplyAction="http://tempuri.org/IService1/GetPersonEventByEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO[]> GetPersonEventByEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllContribution", ReplyAction="http://tempuri.org/IService1/GetAllContributionResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[] GetAllContribution();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllContribution", ReplyAction="http://tempuri.org/IService1/GetAllContributionResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[]> GetAllContributionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContributionByEvent", ReplyAction="http://tempuri.org/IService1/GetContributionByEventResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[] GetContributionByEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContributionByEvent", ReplyAction="http://tempuri.org/IService1/GetContributionByEventResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[]> GetContributionByEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContributionByPerson", ReplyAction="http://tempuri.org/IService1/GetContributionByPersonResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[] GetContributionByPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContributionByPerson", ReplyAction="http://tempuri.org/IService1/GetContributionByPersonResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[]> GetContributionByPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertContribution", ReplyAction="http://tempuri.org/IService1/InsertContributionResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO InsertContribution(SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO contribution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertContribution", ReplyAction="http://tempuri.org/IService1/InsertContributionResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO> InsertContributionAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO contribution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveContributionByPerson", ReplyAction="http://tempuri.org/IService1/RemoveContributionByPersonResponse")]
        void RemoveContributionByPerson(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveContributionByPerson", ReplyAction="http://tempuri.org/IService1/RemoveContributionByPersonResponse")]
        System.Threading.Tasks.Task RemoveContributionByPersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTypeContribution", ReplyAction="http://tempuri.org/IService1/GetAllTypeContributionResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO[] GetAllTypeContribution();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTypeContribution", ReplyAction="http://tempuri.org/IService1/GetAllTypeContributionResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO[]> GetAllTypeContributionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeContribution", ReplyAction="http://tempuri.org/IService1/GetTypeContributionResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO GetTypeContribution(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeContribution", ReplyAction="http://tempuri.org/IService1/GetTypeContributionResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO> GetTypeContributionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertTypeContribution", ReplyAction="http://tempuri.org/IService1/InsertTypeContributionResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO InsertTypeContribution(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO typeContribution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertTypeContribution", ReplyAction="http://tempuri.org/IService1/InsertTypeContributionResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO> InsertTypeContributionAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO typeContribution);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeContributionByName", ReplyAction="http://tempuri.org/IService1/GetTypeContributionByNameResponse")]
        SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO GetTypeContributionByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypeContributionByName", ReplyAction="http://tempuri.org/IService1/GetTypeContributionByNameResponse")]
        System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO> GetTypeContributionByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SynchronicWoldConsole.SynchronicWorldServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SynchronicWoldConsole.SynchronicWorldServiceReference.IService1>, SynchronicWoldConsole.SynchronicWorldServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO[] GetAllPerson() {
            return base.Channel.GetAllPerson();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO[]> GetAllPersonAsync() {
            return base.Channel.GetAllPersonAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO GetPerson(int id) {
            return base.Channel.GetPerson(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO> GetPersonAsync(int id) {
            return base.Channel.GetPersonAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO InsertPerson(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person) {
            return base.Channel.InsertPerson(person);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO> InsertPersonAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person) {
            return base.Channel.InsertPersonAsync(person);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO EditPerson(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person) {
            return base.Channel.EditPerson(person);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO> EditPersonAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person) {
            return base.Channel.EditPersonAsync(person);
        }
        
        public void RemovePerson(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person) {
            base.Channel.RemovePerson(person);
        }
        
        public System.Threading.Tasks.Task RemovePersonAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonDTO person) {
            return base.Channel.RemovePersonAsync(person);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetAllEvent() {
            return base.Channel.GetAllEvent();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetAllEventAsync() {
            return base.Channel.GetAllEventAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO GetEvent(int id) {
            return base.Channel.GetEvent(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO> GetEventAsync(int id) {
            return base.Channel.GetEventAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO InsertEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events) {
            return base.Channel.InsertEvent(events);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO> InsertEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events) {
            return base.Channel.InsertEventAsync(events);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO EditEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events) {
            return base.Channel.EditEvent(events);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO> EditEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events) {
            return base.Channel.EditEventAsync(events);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] UpdateEventPending() {
            return base.Channel.UpdateEventPending();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> UpdateEventPendingAsync() {
            return base.Channel.UpdateEventPendingAsync();
        }
        
        public void RemoveEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events) {
            base.Channel.RemoveEvent(events);
        }
        
        public System.Threading.Tasks.Task RemoveEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO events) {
            return base.Channel.RemoveEventAsync(events);
        }
        
        public void RemoveEventClosed() {
            base.Channel.RemoveEventClosed();
        }
        
        public System.Threading.Tasks.Task RemoveEventClosedAsync() {
            return base.Channel.RemoveEventClosedAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByName(string name) {
            return base.Channel.GetEventByName(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByNameAsync(string name) {
            return base.Channel.GetEventByNameAsync(name);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByType(string name) {
            return base.Channel.GetEventByType(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByTypeAsync(string name) {
            return base.Channel.GetEventByTypeAsync(name);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByStatus(string name) {
            return base.Channel.GetEventByStatus(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByStatusAsync(string name) {
            return base.Channel.GetEventByStatusAsync(name);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventByDate(System.DateTime date) {
            return base.Channel.GetEventByDate(date);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventByDateAsync(System.DateTime date) {
            return base.Channel.GetEventByDateAsync(date);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[] GetEventBetweenDate(System.DateTime date1, System.DateTime date2) {
            return base.Channel.GetEventBetweenDate(date1, date2);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.EventDTO[]> GetEventBetweenDateAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.GetEventBetweenDateAsync(date1, date2);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO[] GetAllTypeEvent() {
            return base.Channel.GetAllTypeEvent();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO[]> GetAllTypeEventAsync() {
            return base.Channel.GetAllTypeEventAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO GetTypeEventByName(string name) {
            return base.Channel.GetTypeEventByName(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO> GetTypeEventByNameAsync(string name) {
            return base.Channel.GetTypeEventByNameAsync(name);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO GetTypeEvent(int id) {
            return base.Channel.GetTypeEvent(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO> GetTypeEventAsync(int id) {
            return base.Channel.GetTypeEventAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO InsertTypeEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO typeEvent) {
            return base.Channel.InsertTypeEvent(typeEvent);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO> InsertTypeEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeEventDTO typeEvent) {
            return base.Channel.InsertTypeEventAsync(typeEvent);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO[] GetAllStatusEvent() {
            return base.Channel.GetAllStatusEvent();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO[]> GetAllStatusEventAsync() {
            return base.Channel.GetAllStatusEventAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO GetStatusEventByName(string name) {
            return base.Channel.GetStatusEventByName(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO> GetStatusEventByNameAsync(string name) {
            return base.Channel.GetStatusEventByNameAsync(name);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO GetStatusEvent(int id) {
            return base.Channel.GetStatusEvent(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO> GetStatusEventAsync(int id) {
            return base.Channel.GetStatusEventAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO InsertStatusEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO statusEvent) {
            return base.Channel.InsertStatusEvent(statusEvent);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO> InsertStatusEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.StatusEventDTO statusEvent) {
            return base.Channel.InsertStatusEventAsync(statusEvent);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO InsertPersonEvent(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO personEvent) {
            return base.Channel.InsertPersonEvent(personEvent);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO> InsertPersonEventAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO personEvent) {
            return base.Channel.InsertPersonEventAsync(personEvent);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO[] GetPersonEventByEvent(int id) {
            return base.Channel.GetPersonEventByEvent(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.PersonEventDTO[]> GetPersonEventByEventAsync(int id) {
            return base.Channel.GetPersonEventByEventAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[] GetAllContribution() {
            return base.Channel.GetAllContribution();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[]> GetAllContributionAsync() {
            return base.Channel.GetAllContributionAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[] GetContributionByEvent(int id) {
            return base.Channel.GetContributionByEvent(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[]> GetContributionByEventAsync(int id) {
            return base.Channel.GetContributionByEventAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[] GetContributionByPerson(int id) {
            return base.Channel.GetContributionByPerson(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO[]> GetContributionByPersonAsync(int id) {
            return base.Channel.GetContributionByPersonAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO InsertContribution(SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO contribution) {
            return base.Channel.InsertContribution(contribution);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO> InsertContributionAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.ContributionDTO contribution) {
            return base.Channel.InsertContributionAsync(contribution);
        }
        
        public void RemoveContributionByPerson(int id) {
            base.Channel.RemoveContributionByPerson(id);
        }
        
        public System.Threading.Tasks.Task RemoveContributionByPersonAsync(int id) {
            return base.Channel.RemoveContributionByPersonAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO[] GetAllTypeContribution() {
            return base.Channel.GetAllTypeContribution();
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO[]> GetAllTypeContributionAsync() {
            return base.Channel.GetAllTypeContributionAsync();
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO GetTypeContribution(int id) {
            return base.Channel.GetTypeContribution(id);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO> GetTypeContributionAsync(int id) {
            return base.Channel.GetTypeContributionAsync(id);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO InsertTypeContribution(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO typeContribution) {
            return base.Channel.InsertTypeContribution(typeContribution);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO> InsertTypeContributionAsync(SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO typeContribution) {
            return base.Channel.InsertTypeContributionAsync(typeContribution);
        }
        
        public SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO GetTypeContributionByName(string name) {
            return base.Channel.GetTypeContributionByName(name);
        }
        
        public System.Threading.Tasks.Task<SynchronicWoldConsole.SynchronicWorldServiceReference.TypeContributionDTO> GetTypeContributionByNameAsync(string name) {
            return base.Channel.GetTypeContributionByNameAsync(name);
        }
    }
}
